// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250616103943_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Models.Clients.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("ClientType").HasValue("Client");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Project.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("SoftwareSystemId")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupportYears")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareSystemId");

                    b.HasIndex("SoftwareVersionId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Project.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountType = 1,
                            EndDate = new DateTime(2025, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Black Friday Discount",
                            Percentage = 10,
                            StartDate = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DiscountType = 0,
                            EndDate = new DateTime(2025, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Year Discount",
                            Percentage = 15,
                            StartDate = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DiscountType = 0,
                            EndDate = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Black Friday Discount",
                            Percentage = 25,
                            StartDate = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Project.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Project.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Project.Models.SoftwareSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("SubscriptionCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("UpfrontCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.ToTable("SoftwareSystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Finance",
                            Description = "Comprehensive accounting software for small to medium businesses",
                            Name = "AccountingPro",
                            SubscriptionCost = 29.99m,
                            UpfrontCost = 299.99m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Education",
                            Description = "Complete student management system for educational institutions",
                            Name = "EduManager",
                            SubscriptionCost = 49.99m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Finance",
                            Description = "Simple invoicing solution for freelancers and consultants",
                            Name = "InvoiceExpress",
                            SubscriptionCost = 15.99m,
                            UpfrontCost = 159.99m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Education",
                            Description = "E-learning platform with course management and analytics",
                            Name = "LearningHub",
                            UpfrontCost = 1999.99m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Retail",
                            Description = "Advanced inventory management system for retail businesses",
                            Name = "InventoryMaster",
                            SubscriptionCost = 39.99m
                        });
                });

            modelBuilder.Entity("Project.Models.SoftwareVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SoftwareSystemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareSystemId");

                    b.ToTable("Versions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCurrent = false,
                            Name = "1.0.0",
                            SoftwareSystemId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCurrent = false,
                            Name = "2.0.0",
                            SoftwareSystemId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCurrent = true,
                            Name = "3.0.0",
                            SoftwareSystemId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsCurrent = false,
                            Name = "1.0.0",
                            SoftwareSystemId = 2
                        },
                        new
                        {
                            Id = 5,
                            IsCurrent = false,
                            Name = "1.5.0",
                            SoftwareSystemId = 2
                        },
                        new
                        {
                            Id = 6,
                            IsCurrent = true,
                            Name = "2.0.0",
                            SoftwareSystemId = 2
                        },
                        new
                        {
                            Id = 7,
                            IsCurrent = false,
                            Name = "1.0.0",
                            SoftwareSystemId = 3
                        },
                        new
                        {
                            Id = 8,
                            IsCurrent = false,
                            Name = "1.1.0",
                            SoftwareSystemId = 3
                        },
                        new
                        {
                            Id = 9,
                            IsCurrent = true,
                            Name = "2.0.0",
                            SoftwareSystemId = 3
                        },
                        new
                        {
                            Id = 10,
                            IsCurrent = false,
                            Name = "1.0.0",
                            SoftwareSystemId = 4
                        },
                        new
                        {
                            Id = 11,
                            IsCurrent = false,
                            Name = "2.0.0",
                            SoftwareSystemId = 4
                        },
                        new
                        {
                            Id = 12,
                            IsCurrent = true,
                            Name = "2.1.0",
                            SoftwareSystemId = 4
                        },
                        new
                        {
                            Id = 13,
                            IsCurrent = false,
                            Name = "1.0.0",
                            SoftwareSystemId = 5
                        },
                        new
                        {
                            Id = 14,
                            IsCurrent = false,
                            Name = "1.2.0",
                            SoftwareSystemId = 5
                        },
                        new
                        {
                            Id = 15,
                            IsCurrent = true,
                            Name = "2.0.0",
                            SoftwareSystemId = 5
                        });
                });

            modelBuilder.Entity("Project.Models.Clients.CompanyClient", b =>
                {
                    b.HasBaseType("Project.Models.Clients.Client");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KrsNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasIndex("KrsNumber")
                        .IsUnique()
                        .HasFilter("[KrsNumber] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Company");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Address = "al. Jerozolimskie 123, 02-001 Warszawa",
                            ClientType = "Company",
                            Email = "kontakt@techsoft.pl",
                            PhoneNumber = "+48222345678",
                            CompanyName = "TechSoft Sp. z o.o.",
                            KrsNumber = "0000123456"
                        },
                        new
                        {
                            Id = 7,
                            Address = "ul. Floriańska 12, 31-019 Kraków",
                            ClientType = "Company",
                            Email = "biuro@globalsolutions.pl",
                            PhoneNumber = "+48123456789",
                            CompanyName = "Global Solutions S.A.",
                            KrsNumber = "0000234567"
                        },
                        new
                        {
                            Id = 8,
                            Address = "ul. Narutowicza 88, 80-001 Gdańsk",
                            ClientType = "Company",
                            Email = "info@innowacja.pl",
                            PhoneNumber = "+48581234567",
                            CompanyName = "Innowacja Polska Sp. z o.o.",
                            KrsNumber = "0000345678"
                        },
                        new
                        {
                            Id = 9,
                            Address = "ul. Andersa 7, 61-001 Poznań",
                            ClientType = "Company",
                            Email = "contact@digitalpartners.pl",
                            PhoneNumber = "+48616789012",
                            CompanyName = "Digital Partners S.A.",
                            KrsNumber = "0000456789"
                        },
                        new
                        {
                            Id = 10,
                            Address = "ul. Piłsudskiego 25, 90-001 Łódź",
                            ClientType = "Company",
                            Email = "hello@futuretech.pl",
                            PhoneNumber = "+48423456789",
                            CompanyName = "Future Tech Sp. z o.o.",
                            KrsNumber = "0000567890"
                        });
                });

            modelBuilder.Entity("Project.Models.Clients.IndividualClient", b =>
                {
                    b.HasBaseType("Project.Models.Clients.Client");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.HasIndex("Pesel")
                        .IsUnique()
                        .HasFilter("[Pesel] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Individual");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ul. Marszałkowska 1, 00-001 Warszawa",
                            ClientType = "Individual",
                            Email = "jan.kowalski@email.com",
                            PhoneNumber = "+48123456789",
                            FirstName = "Jan",
                            IsDeleted = false,
                            LastName = "Kowalski",
                            Pesel = "85010112345"
                        },
                        new
                        {
                            Id = 2,
                            Address = "ul. Nowy Świat 15, 00-001 Warszawa",
                            ClientType = "Individual",
                            Email = "anna.nowak@email.com",
                            PhoneNumber = "+48987654321",
                            FirstName = "Anna",
                            IsDeleted = false,
                            LastName = "Nowak",
                            Pesel = "90020287654"
                        },
                        new
                        {
                            Id = 3,
                            Address = "ul. Krakowskie Przedmieście 3, 31-013 Kraków",
                            ClientType = "Individual",
                            Email = "piotr.wisniewski@email.com",
                            PhoneNumber = "+48555123456",
                            FirstName = "Piotr",
                            IsDeleted = false,
                            LastName = "Wiśniewski",
                            Pesel = "75121565432"
                        },
                        new
                        {
                            Id = 4,
                            Address = "ul. Piotrkowska 100, 90-001 Łódź",
                            ClientType = "Individual",
                            Email = "maria.wojcik@email.com",
                            PhoneNumber = "+48666789012",
                            FirstName = "Maria",
                            IsDeleted = false,
                            LastName = "Wójcik",
                            Pesel = "88030445678"
                        },
                        new
                        {
                            Id = 5,
                            Address = "ul. Świdnicka 5, 50-001 Wrocław",
                            ClientType = "Individual",
                            Email = "tomasz.kaczmarek@email.com",
                            PhoneNumber = "+48777234567",
                            FirstName = "Tomasz",
                            IsDeleted = false,
                            LastName = "Kaczmarek",
                            Pesel = "92111098765"
                        });
                });

            modelBuilder.Entity("Project.Models.Contract", b =>
                {
                    b.HasOne("Project.Models.Clients.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.SoftwareSystem", "SoftwareSystem")
                        .WithMany("Contracts")
                        .HasForeignKey("SoftwareSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.SoftwareVersion", "Version")
                        .WithMany("Contracts")
                        .HasForeignKey("SoftwareVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("SoftwareSystem");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Project.Models.Payment", b =>
                {
                    b.HasOne("Project.Models.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Project.Models.SoftwareVersion", b =>
                {
                    b.HasOne("Project.Models.SoftwareSystem", "SoftwareSystem")
                        .WithMany("Versions")
                        .HasForeignKey("SoftwareSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoftwareSystem");
                });

            modelBuilder.Entity("Project.Models.Clients.Client", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Project.Models.Contract", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Project.Models.SoftwareSystem", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Project.Models.SoftwareVersion", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
